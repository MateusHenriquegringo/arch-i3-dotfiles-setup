## BACKEND
backend = "glx"
glx-no-stencil = true;
glx-copy-from-front=false;

# blur-kern = "5x5gaussian";
# dbus = true
# daemon = false
dithered-present = false;

vsync = true;

detect-rounded-corners = false;

detect-client-opacity = true;

use-ewmh-active-win = true

unredir-if-possible = false

# unredir-if-possible-delay = 0

detect-transient = true;

# detect-client-leader = false

use-damage = true;
# xrender-sync-fence = false

# GLX backend: Use specified GLSL fragment shader for rendering window
# contents. Read the man page for a detailed explanation of the interface.
#
# Can be set per-window using rules.
#
# window-shader-fg = "default"

# Force all windows to be painted with blending. Useful if you
# have a `window-shader-fg` that could turn opaque pixels transparent.
#

force-win-blend = true
# no-ewmh-fullscreen = false
# max-brightness = 1.0
transparent-clipping = false


## SHADOW
shadow = false
shadow-radius = 5;
shadow-opacity = .95
shadow-offset-x = 10;
shadow-offset-y = 10;
shadow-color = "#500000"
# crop-shadow-to-monitor = false


## FADDING
fading = false;
fade-in-step = 0.03;
fade-out-step = 0.03;
fade-delta = 8
# no-fading-openclose = false
# no-fading-destroyed-argb = false


## OPACITY
frame-opacity = 1;
# will be deprecated -> menu-opacity = 0.5
dropdown_menu = 0.9;
# inactive-dim-fixed = true
#inactive-opacity = 0.8;
#active-opacity = 0.9;
# inactive-fim-fixed = 0.8;
mark-ovredir-focused = false


animations = (
 { 
	triggers = ["close", "hide"];
	preset = "disappear";
	scale = 0.9;
	duration = 0.2;
 },
 {
	triggers = ["open", "show"];
	preset = "appear";
	scale = 0.9;
	duration = 0.2;
 }
)

rounded-corners-exclude = [
	"window_type = 'dock'",
	"window_type = 'desktop'",
	"class_g = 'dmenu'"
]

opacity-rule = [
	#"98:class_g = 'firefox' && focused",
	#"98:class_g = 'firefox' && !focused",
	"90:class_g = 'Alacritty' && !focused",
	"98:class_g = 'Alacritty' && focused",
	"80:class_g = 'Spotify' && !focused",
	"95:class_g = 'Spotify' && focused",
	#"30:class_g = 'chromium-browser'",
	#"80:WM_WINDOW_ROLE = 'pop-up'"
]


## CORNER
corner-radius = 15


## BLUR
blur-method = "dual_kawase"
# blur-size =1

# blur-deviation = true
blur-strength = 4
blur-background = false

# Blur background of windows when the window frame is not opaque.
#i Implies:
#    blur-background
#

blur-background-frame = false
blur-background-fixed = false


## LOW LEVEL
# example:
#    blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
#



## LOGGING
# Set the log level. Possible values are:
#  "trace", "debug", "info", "warn", "error"
# in increasing level of importance. Case insensitive.
# If using the "TRACE" log level, it's better to log into a file
# using *--log-file*, since it can generate a huge stream of logs.
#
# Default: "warn"
# log-level = "warn";

# Set the log file.
# If *--log-file* is never specified, logs will be written to stderr.
# Otherwise, logs will to written to the given file, though some of the early
# logs might still be written to the stderr.
# When setting this option from the config file, it is recommended to use an absolute path.
#
# log-file = "/path/to/your/log/file"

# Write process ID to a file.
# write-pid-path = "/path/to/your/log/file"

# Rule-based per-window options.
#
# See WINDOW RULES section in the man page for how these work.
#rules: (
#{
#  match = "window_type = 'dock' || "
#          "window_type = 'desktop'";
#  corner-radius = 0;
#}
#)
# `@include` directive can be used to include additional configuration files.
# Relative paths are search either in the parent of this configuration file
# (when the configuration is loaded through a symlink, the symlink will be
# resolved first). Or in `$XDG_CONFIG_HOME/picom/include`.
#
# @include "extra.conf"
